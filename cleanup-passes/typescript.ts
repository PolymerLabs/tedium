/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

'use strict';

import * as fse from 'fs-extra';
import * as path from 'path';
import {execFile} from 'child_process';
import {promisify} from 'util';

import {register} from '../cleanup-pass';
import {ElementRepo} from '../element-repo';
import {makeCommit} from './util';

const generatorPackageName = '@polymer/gen-typescript-declarations';
const generatorSemver = '^1.0.0';
const npmScriptName = 'update-types';
const npmScriptCommand =
    'rm -f *.d.ts **/*.d.ts && gen-typescript-declarations --outDir .';

const execFilePromise = promisify(execFile);

/**
 * This pass updates an element repo to include typings generated by
 * https://github.com/Polymer/gen-typescript-declarations/ and configures an
 * "update-types" NPM script that can be run to re-generate them.
 *
 * Throws an error if the repo has a missing or invalid package.json or if npm
 * or bower aren't globally installed.
 */
async function typescriptPass(element: ElementRepo): Promise<void> {
  const packageJsonPath = path.join(element.dir, 'package.json');
  let packageJson: NpmConfig;
  try {
    packageJson = await fse.readJson(packageJsonPath);
  } catch {
    throw new Error(
        `Missing or invalid package.json for element: ${element.ghRepo.name}`);
  }

  if (packageJson.devDependencies === undefined) {
    packageJson.devDependencies = {};
  }
  if (packageJson.scripts === undefined) {
    packageJson.scripts = {};
  }

  let writePackageJson = false;
  if (packageJson.devDependencies[generatorPackageName] !== generatorSemver) {
    packageJson.devDependencies[generatorPackageName] = generatorSemver;
    writePackageJson = true;
  }
  if (packageJson.scripts[npmScriptName] !== npmScriptCommand) {
    packageJson.scripts[npmScriptName] = npmScriptCommand;
    writePackageJson = true;
  }
  if (writePackageJson) {
    await fse.writeJson(packageJsonPath, packageJson, {spaces: 2});
  }

  const execOpts = {cwd: element.dir};

  // Install the generator and its dependencies.
  await execFilePromise('npm', ['install'], execOpts);

  // We also have to bower install because the generator wants to actually
  // resolve dependencies in the HTML import graph.
  await execFilePromise('bower', ['install'], execOpts);

  // Run the generator (using the script we added above).
  await execFilePromise('npm', ['run', npmScriptName], execOpts);

  let doCommit = false;
  const commitFiles = [];
  for (const changedFile of await element.repo.getStatus()) {
    const filepath = changedFile.path();
    if (filepath.endsWith('.d.ts')) {
      doCommit = true;
      commitFiles.push(filepath);
    } else if (filepath === 'package.json') {
      doCommit = true;
      commitFiles.push(filepath);
    } else if (filepath === 'package-lock.json') {
      // If all we did was update the package lock, don't bother with the
      // commit. But do include it if we changed something else.
      commitFiles.push(filepath);
    } else {
      console.log(`Unexpected changed file: ${filepath}`);
    }
  }

  if (doCommit) {
    await makeCommit(
        element, commitFiles, 'Update and/or configure type declarations.');
  }
}

register({
  name: 'typescript',
  pass: typescriptPass,
  runsByDefault: false,
});
